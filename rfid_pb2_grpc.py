# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import rfid_pb2 as rfid__pb2


class RFID_SERVICEStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RFID_Change = channel.unary_unary(
        '/RFID_SERVICE/RFID_Change',
        request_serializer=rfid__pb2.RFID_MSG.SerializeToString,
        response_deserializer=rfid__pb2.RFID_RESPONSE.FromString,
        )


class RFID_SERVICEServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def RFID_Change(self, request, context):
    """Make RPC on function RFID_Change with message RFID_MSG
    Waits for RFID_RESPONSE from server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RFID_SERVICEServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RFID_Change': grpc.unary_unary_rpc_method_handler(
          servicer.RFID_Change,
          request_deserializer=rfid__pb2.RFID_MSG.FromString,
          response_serializer=rfid__pb2.RFID_RESPONSE.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'RFID_SERVICE', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
